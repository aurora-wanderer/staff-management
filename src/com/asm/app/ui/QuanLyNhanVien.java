package com.asm.app.ui;

import com.asm.app.core.Employee;
import com.asm.app.core.Validator;
import java.awt.Color;

import java.awt.event.KeyEvent;

import java.io.*;

import java.text.SimpleDateFormat;

import java.util.*;
import java.util.function.Predicate;
import java.util.logging.*;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;

public class QuanLyNhanVien extends javax.swing.JFrame implements Runnable, Serializable {

    private final String EMPTY_INPUT_MESSAGE = "Trường này không được để trống!";
    private final String NOT_VALID_MESSAGE = " không hợp lệ";
    private final String VALID_MESSAGE = null;
//    final File INPUT_FILE_INSIDE_PROJECT = new File(".\\src\\com\\asm\\app\\csv\\input.txt");
//    final File OUTPUT_FILE_INSIDE_PROJECT = new File(".\\src\\com\\asm\\app\\csv\\output.txt");
    private final int SPACE_KEY_CODE = 8;
    private int index;

    private DefaultTableModel model;
    private List<Employee> list;

    public QuanLyNhanVien() {
        super("Quản lý nhân viên");
        initComponents();
        this.preventDefault();
        run();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        TITLE = new javax.swing.JLabel();
        clock = new javax.swing.JLabel();
        formPanel = new javax.swing.JPanel();
        idLabel = new javax.swing.JLabel();
        fullNameLabel = new javax.swing.JLabel();
        ageLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        luongLabel = new javax.swing.JLabel();
        txtLuong = new javax.swing.JTextField();
        firstEleBtn = new javax.swing.JButton();
        previousBtn = new javax.swing.JButton();
        nextBtn = new javax.swing.JButton();
        lastEleBtn = new javax.swing.JButton();
        nameError_msg = new javax.swing.JLabel();
        idError_msg = new javax.swing.JLabel();
        ageError_msg = new javax.swing.JLabel();
        emailError_msg = new javax.swing.JLabel();
        record = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtFullName = new javax.swing.JTextField();
        txtAge = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        luongError_msg = new javax.swing.JLabel();
        buttonsPanel = new javax.swing.JPanel();
        deleteBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        newBtn = new javax.swing.JButton();
        findBtn = new javax.swing.JButton();
        openBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        tablePane = new javax.swing.JScrollPane();
        tblStaff = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TITLE.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        TITLE.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TITLE.setText("QUẢN LÝ NHÂN VIÊN");

        clock.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        clock.setForeground(new java.awt.Color(255, 0, 0));
        clock.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        formPanel.setPreferredSize(new java.awt.Dimension(518, 373));

        idLabel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        idLabel.setText("ID Nhân Viên");

        fullNameLabel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        fullNameLabel.setText("Họ và Tên");

        ageLabel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        ageLabel.setText("Tuổi");

        emailLabel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        emailLabel.setText("Email");

        luongLabel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        luongLabel.setText("Lương");

        txtLuong.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        txtLuong.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtLuongFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLuongFocusLost(evt);
            }
        });
        txtLuong.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtLuongKeyReleased(evt);
            }
        });

        firstEleBtn.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        firstEleBtn.setText("|<");
        firstEleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstEleBtnActionPerformed(evt);
            }
        });

        previousBtn.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        previousBtn.setText("<<");
        previousBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousBtnActionPerformed(evt);
            }
        });

        nextBtn.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        nextBtn.setText(">>");
        nextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBtnActionPerformed(evt);
            }
        });

        lastEleBtn.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        lastEleBtn.setText(">|");
        lastEleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastEleBtnActionPerformed(evt);
            }
        });

        nameError_msg.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        nameError_msg.setForeground(new java.awt.Color(255, 0, 0));

        idError_msg.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        idError_msg.setForeground(new java.awt.Color(255, 0, 0));

        ageError_msg.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        ageError_msg.setForeground(new java.awt.Color(255, 0, 0));

        emailError_msg.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        emailError_msg.setForeground(new java.awt.Color(255, 0, 0));

        record.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        record.setForeground(new java.awt.Color(255, 0, 0));
        record.setText("Record:");

        txtID.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        txtID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtIDFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIDFocusLost(evt);
            }
        });
        txtID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtIDKeyReleased(evt);
            }
        });

        txtFullName.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        txtFullName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFullNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFullNameFocusLost(evt);
            }
        });
        txtFullName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFullNameKeyReleased(evt);
            }
        });

        txtAge.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        txtAge.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtAgeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAgeFocusLost(evt);
            }
        });
        txtAge.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAgeKeyReleased(evt);
            }
        });

        txtEmail.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        txtEmail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtEmailFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmailFocusLost(evt);
            }
        });
        txtEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEmailKeyReleased(evt);
            }
        });

        luongError_msg.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        luongError_msg.setForeground(new java.awt.Color(255, 0, 0));
        luongError_msg.setPreferredSize(new java.awt.Dimension(43, 25));

        javax.swing.GroupLayout formPanelLayout = new javax.swing.GroupLayout(formPanel);
        formPanel.setLayout(formPanelLayout);
        formPanelLayout.setHorizontalGroup(
            formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(idLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fullNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(emailLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(luongLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, formPanelLayout.createSequentialGroup()
                        .addComponent(firstEleBtn)
                        .addGap(18, 18, 18)
                        .addComponent(previousBtn)
                        .addGap(18, 18, 18)
                        .addComponent(nextBtn)
                        .addGap(18, 18, 18)
                        .addComponent(lastEleBtn)
                        .addGap(18, 18, 18)
                        .addComponent(record, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtID)
                    .addComponent(txtFullName)
                    .addComponent(txtAge)
                    .addComponent(txtEmail)
                    .addComponent(idError_msg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nameError_msg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ageError_msg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(emailError_msg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtLuong)
                    .addComponent(luongError_msg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        formPanelLayout.setVerticalGroup(
            formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, formPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(idLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(idError_msg, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fullNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameError_msg, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ageError_msg, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(emailLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(emailError_msg, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(luongLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(luongError_msg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstEleBtn)
                    .addComponent(previousBtn)
                    .addComponent(nextBtn)
                    .addComponent(lastEleBtn)
                    .addComponent(record, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        buttonsPanel.setLayout(new java.awt.GridBagLayout());

        deleteBtn.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 18;
        gridBagConstraints.ipady = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 12, 0, 12);
        buttonsPanel.add(deleteBtn, gridBagConstraints);

        saveBtn.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 26;
        gridBagConstraints.ipady = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 12, 0, 12);
        buttonsPanel.add(saveBtn, gridBagConstraints);

        newBtn.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        newBtn.setText("New");
        newBtn.setPreferredSize(new java.awt.Dimension(61, 25));
        newBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(62, 12, 0, 12);
        buttonsPanel.add(newBtn, gridBagConstraints);

        findBtn.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        findBtn.setText("Find");
        findBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 32;
        gridBagConstraints.ipady = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 12, 0, 12);
        buttonsPanel.add(findBtn, gridBagConstraints);

        openBtn.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        openBtn.setText("Open");
        openBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 24;
        gridBagConstraints.ipady = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 12, 0, 12);
        buttonsPanel.add(openBtn, gridBagConstraints);

        exitBtn.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        exitBtn.setText("Exit");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 36;
        gridBagConstraints.ipady = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 12, 13, 12);
        buttonsPanel.add(exitBtn, gridBagConstraints);

        tblStaff.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã", "Họ và tên", "Tuổi", "Email", "Lương"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblStaff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblStaffMouseClicked(evt);
            }
        });
        tblStaff.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblStaffKeyReleased(evt);
            }
        });
        tablePane.setViewportView(tblStaff);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tablePane)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(formPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                            .addComponent(TITLE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(clock, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(TITLE, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(clock, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(formPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tablePane, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Button option
    private void newBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newBtnActionPerformed
        clearTheFrom();
    }// GEN-LAST:event_newBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveBtnActionPerformed
        addEmployee();
        fillTable();
    }// GEN-LAST:event_saveBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_deleteBnActionPerformed
//        findEmployee();
        deleteEmployee();
        fillTable();
        clearTheFrom();
    }// GEN-LAST:event_deleteBnActionPerformed

    private void findBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_findBtnActionPerformed
        findEmployee();
        fillTheForm();
    }// GEN-LAST:event_findBtnActionPerformed

    private void openBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_openBtnActionPerformed
        openFile();
        clearTheFrom();
        setFirstEmpOnForm();
        fillTable();
    }// GEN-LAST:event_openBtnActionPerformed

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_exitBtnActionPerformed
        saveFile();
    }// GEN-LAST:event_exitBtnActionPerformed

    // ID on-input and blur case
    private void txtIDFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtIDFocusGained
        txtID.setBackground(Color.white);
        txtID.setSelectionStart(0);
        txtID.setSelectionEnd(txtID.getText().length());
    }// GEN-LAST:event_txtIDFocusGained

    private void txtIDFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtIDFocusLost
        String value = txtID.getText().trim();
        txtID.setText(value);

        idError_msg.setText(Validator.isRequired(value) ? EMPTY_INPUT_MESSAGE
                : !Validator.isID(value) ? idLabel.getText() + NOT_VALID_MESSAGE : VALID_MESSAGE);

        txtID.setBackground(Validator.isRequired(value) ? Color.yellow
                : !Validator.isID(value) ? Color.yellow : Color.white);
    }// GEN-LAST:event_txtIDFocusLost

    private void txtIDKeyReleased(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_txtIDKeyReleased
        String valueID = txtID.getText();

        if ((evt.getKeyCode() == SPACE_KEY_CODE && Validator.isRequired(valueID))
                || Validator.isRequired(valueID)) {
            idError_msg.setText(EMPTY_INPUT_MESSAGE);
            txtID.setBackground(Color.yellow);
            return;
        }

        idError_msg.setText(VALID_MESSAGE);
        txtID.setBackground(Color.white);
    }// GEN-LAST:event_txtIDKeyReleased

    // Full Name on-input and blur case
    private void txtFullNameFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtFullNameFocusGained
        txtFullName.setBackground(Color.white);
        txtFullName.setSelectionStart(0);
        txtFullName.setSelectionEnd(txtFullName.getText().length());
    }// GEN-LAST:event_txtFullNameFocusGained

    private void txtFullNameFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtFullNameFocusLost
        String value = txtFullName.getText().trim();
        txtFullName.setText(value);
        nameError_msg.setText(Validator.isRequired(value) ? EMPTY_INPUT_MESSAGE
                : !Validator.isName(value) ? fullNameLabel.getText() + NOT_VALID_MESSAGE : VALID_MESSAGE);

        txtFullName.setBackground(Validator.isRequired(value) ? Color.yellow
                : !Validator.isName(value) ? Color.yellow : Color.white);
    }// GEN-LAST:event_txtFullNameFocusLost

    private void txtFullNameKeyReleased(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_txtFullNameKeyReleased
        String valueFullName = txtFullName.getText();

        if ((evt.getKeyCode() == SPACE_KEY_CODE && Validator.isRequired(valueFullName))
                || Validator.isRequired(valueFullName)) {
            nameError_msg.setText(EMPTY_INPUT_MESSAGE);
            txtFullName.setBackground(Color.yellow);
            return;
        }

        nameError_msg.setText(VALID_MESSAGE);
        txtFullName.setBackground(Color.white);
    }// GEN-LAST:event_txtFullNameKeyReleased

    // Age on-input and blur case
    private void txtAgeFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtAgeFocusGained
        txtAge.setBackground(Color.white);
        txtAge.setSelectionStart(0);
        txtAge.setSelectionEnd(txtAge.getText().length());
    }// GEN-LAST:event_txtAgeFocusGained

    private void txtAgeFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtAgeFocusLost
        String value = txtAge.getText().trim();
        txtAge.setText(value);

        ageError_msg.setText(Validator.isRequired(value) ? EMPTY_INPUT_MESSAGE
                : !Validator.isAge(value) ? ageLabel.getText() + NOT_VALID_MESSAGE : VALID_MESSAGE);

        txtAge.setBackground(Validator.isRequired(value) ? Color.yellow
                : !Validator.isAge(value) ? Color.yellow : Color.white);
    }// GEN-LAST:event_txtAgeFocusLost

    private void txtAgeKeyReleased(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_txtAgeKeyReleased
        String valueAge = txtFullName.getText();

        if ((evt.getKeyCode() == SPACE_KEY_CODE && Validator.isRequired(valueAge))
                || Validator.isRequired(valueAge)) {
            ageError_msg.setText(EMPTY_INPUT_MESSAGE);
            txtAge.setBackground(Color.yellow);
            return;
        }

        ageError_msg.setText(VALID_MESSAGE);
        txtAge.setBackground(Color.white);
    }// GEN-LAST:event_txtAgeKeyReleased

    // Email on-input and blur case
    private void txtEmailFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtEmailFocusGained
        txtEmail.setSelectionStart(0);
        txtEmail.setSelectionEnd(txtEmail.getText().length());
        txtEmail.setBackground(Color.white);
    }// GEN-LAST:event_txtEmailFocusGained

    private void txtEmailFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtEmailFocusLost
        String value = txtEmail.getText().trim();
        txtEmail.setText(value);
        emailError_msg.setText(Validator.isRequired(value) ? EMPTY_INPUT_MESSAGE
                : !Validator.isEmail(value) ? emailLabel.getText() + NOT_VALID_MESSAGE : VALID_MESSAGE);

        txtEmail.setBackground(Validator.isRequired(value) ? Color.yellow
                : !Validator.isEmail(value) ? Color.yellow : Color.white);
    }// GEN-LAST:event_txtEmailFocusLost

    private void txtEmailKeyReleased(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_txtEmailKeyReleased
        String valueEmail = txtEmail.getText();

        if ((evt.getKeyCode() == SPACE_KEY_CODE && Validator.isRequired(valueEmail))
                || Validator.isRequired(valueEmail)) {
            emailError_msg.setText(EMPTY_INPUT_MESSAGE);
            txtEmail.setBackground(Color.yellow);
            return;
        }

        emailError_msg.setText(VALID_MESSAGE);
        txtEmail.setBackground(Color.white);
    }// GEN-LAST:event_txtEmailKeyReleased

    // Luong on-input and blur case
    private void txtLuongFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtLuongFocusGained
        txtLuong.setSelectionStart(0);
        txtLuong.setSelectionEnd(txtLuong.getText().length());
        txtLuong.setBackground(Color.white);

    }// GEN-LAST:event_txtLuongFocusGained

    private void txtLuongFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtLuongFocusLost
        String value = txtLuong.getText();
        txtLuong.setText(value);

        luongError_msg.setText(Validator.isRequired(value) ? EMPTY_INPUT_MESSAGE
                : !Validator.isLuong(value) ? luongLabel.getText() + NOT_VALID_MESSAGE : VALID_MESSAGE);

        txtLuong.setBackground(Validator.isRequired(value) ? Color.yellow
                : !Validator.isLuong(value) ? Color.yellow : Color.white);
    }// GEN-LAST:event_txtLuongFocusLost

    private void txtLuongKeyReleased(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_txtLuongKeyReleased
        String valueLuong = txtLuong.getText();

        if ((evt.getKeyCode() == SPACE_KEY_CODE && Validator.isRequired(valueLuong))
                || Validator.isRequired(valueLuong)) {
            luongError_msg.setText(EMPTY_INPUT_MESSAGE);
            txtLuong.setBackground(Color.yellow);
            return;
        }
        luongError_msg.setText(VALID_MESSAGE);
        txtLuong.setBackground(Color.white);
    }// GEN-LAST:event_txtLuongKeyReleased


    private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBtnActionPerformed
        index++;
        checkIndex();
        setUpRecord();
        fillTheForm();
    }//GEN-LAST:event_nextBtnActionPerformed

    private void lastEleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastEleBtnActionPerformed
        index = list.size() - 1;
        setUpRecord();
        fillTheForm();
    }//GEN-LAST:event_lastEleBtnActionPerformed

    private void firstEleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstEleBtnActionPerformed
        index = 0;
        setUpRecord();
        fillTheForm();
    }//GEN-LAST:event_firstEleBtnActionPerformed

    private void previousBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousBtnActionPerformed
        index--;
        checkIndex();
        setUpRecord();
        fillTheForm();
    }//GEN-LAST:event_previousBtnActionPerformed

    private void tblStaffKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblStaffKeyReleased
        if (evt.getKeyCode() == 40) {
            index++;

        }

        if (evt.getKeyCode() == 38) {
            index--;
        }

        checkIndex();
        setHighLight(index);
        fillTheForm();
    }//GEN-LAST:event_tblStaffKeyReleased

    private void tblStaffMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_tblStaffMouseClicked
        fillTheForm();
    }// GEN-LAST:event_tblStaffMouseClicked
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TITLE;
    private javax.swing.JLabel ageError_msg;
    private javax.swing.JLabel ageLabel;
    private javax.swing.JPanel buttonsPanel;
    public javax.swing.JLabel clock;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel emailError_msg;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JButton exitBtn;
    private javax.swing.JButton findBtn;
    private javax.swing.JButton firstEleBtn;
    private javax.swing.JPanel formPanel;
    private javax.swing.JLabel fullNameLabel;
    private javax.swing.JLabel idError_msg;
    private javax.swing.JLabel idLabel;
    private javax.swing.JButton lastEleBtn;
    private javax.swing.JLabel luongError_msg;
    private javax.swing.JLabel luongLabel;
    private javax.swing.JLabel nameError_msg;
    private javax.swing.JButton newBtn;
    private javax.swing.JButton nextBtn;
    private javax.swing.JButton openBtn;
    private javax.swing.JButton previousBtn;
    private javax.swing.JLabel record;
    private javax.swing.JButton saveBtn;
    private javax.swing.JScrollPane tablePane;
    private javax.swing.JTable tblStaff;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFullName;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtLuong;
    // End of variables declaration//GEN-END:variables

    private void preventDefault() {
        this.setLocationRelativeTo(null);
        model = new DefaultTableModel();
        model = (DefaultTableModel) tblStaff.getModel();
        list = new ArrayList<>();
    }

    private void openFile() {
        JFileChooser fc = new JFileChooser();

        fc.setCurrentDirectory(new File("."));
        int res = fc.showOpenDialog(null);

        if (res == JFileChooser.APPROVE_OPTION) {
            list.clear();
            try {
                File path = fc.getSelectedFile().getAbsoluteFile();
                readFile(path);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(QuanLyNhanVien.class.getName()).log(Level.WARNING,
                        "Path can't found", ex.getLocalizedMessage());
            }
        }
    }

    private void readFile(File path) throws FileNotFoundException {
        String line;
        BufferedReader reader = new BufferedReader(new FileReader(path));

        try {
            while ((line = reader.readLine()) != null) {
                String[] values = line.split("\\s*,\\s*|,|\\n");
                Employee emp = new Employee();
                if (Arrays.asList(values).size() > tblStaff.getColumnCount()) {
                    JOptionPane.showMessageDialog(this,
                            "File không hợp lệ!");
                    return;
                }
                try {
                    emp.setID(values[0]);
                    emp.setName(values[1]);
                    emp.setAge(Integer.parseInt(values[2]));
                    emp.setEmail(values[3]);
                    emp.setLuong(Double.parseDouble(values[4]));
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this,
                            "Dữ liệu không hợp lệ!");
                }
                list.add(emp);
            }
            reader.close();
        } catch (IOException ex) {
            Employee.getLOG().log(Level.INFO, "I/O Error!", ex);
        }
    }

    private void saveFile() {
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File("."));

        int res = fc.showSaveDialog(null);
        if (res == JFileChooser.APPROVE_OPTION) {
            try {
                File path = fc.getSelectedFile().getAbsoluteFile();
                writeFile(path);
                System.exit(0);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(QuanLyNhanVien.class.getName()).log(Level.WARNING,
                        "Path can't found", ex.getLocalizedMessage());
            }
        } else {
            int result = JOptionPane.showConfirmDialog(this,
                    "File chưa được lưu!\nBạn có chắc muốn thoát?");
            if (result == 0) {
                System.exit(0);
            }
        }
    }

    private void writeFile(File path) throws FileNotFoundException {
        if (list.isEmpty()) {
            return;
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(path))) {
            list.forEach(item -> {
                try {
                    writer.write(item.toString());
                } catch (IOException ex) {
                    Employee.getLOG().log(Level.SEVERE, "Can't write to file", ex);
                }
            });
        } catch (IOException ex) {
            Employee.getLOG().log(Level.SEVERE, "Lỗi nhập xuất", ex);
        }
    }

    private void addEmployee() {
        String ID = txtID.getText();
        String name = txtFullName.getText();
        String age = txtAge.getText();
        String email = txtEmail.getText();
        String luong = txtLuong.getText();

        if (Validator.isRequired(ID, name, age, email, luong)) {

            JOptionPane.showMessageDialog(this, 
                    "Vui lòng điền đủ thông tin!",
                    name, JOptionPane.ERROR_MESSAGE);
            validation();
            return;
        }

        boolean employeeExist = list.stream().anyMatch(item -> item.getID().equalsIgnoreCase(ID));
        if (employeeExist) {
            JOptionPane.showMessageDialog(this, 
                    "Nhân viên đã tồn tại");
            return;
        }

        Employee emp = new Employee(ID, name, Integer.valueOf(age), email, Double.valueOf(luong));
        list.add(emp);
    }

    private void clearTheFrom() {
        txtID.setText(VALID_MESSAGE);
        txtFullName.setText(VALID_MESSAGE);
        txtAge.setText(VALID_MESSAGE);
        txtEmail.setText(VALID_MESSAGE);
        txtLuong.setText(VALID_MESSAGE);
        record.setText("Record: ");
        
        // clear errormessage
        idError_msg.setText(VALID_MESSAGE);
        nameError_msg.setText(VALID_MESSAGE);
        ageError_msg.setText(VALID_MESSAGE);
        emailError_msg.setText(VALID_MESSAGE);
        luongError_msg.setText(VALID_MESSAGE);
        
        txtID.setBackground(Color.white);
        txtFullName.setBackground(Color.white);
        txtAge.setBackground(Color.white);
        txtEmail.setBackground(Color.white);
        txtLuong.setBackground(Color.white);
        
        tblStaff.clearSelection();
    }

    private void fillTheForm() {
        if (list.isEmpty()) {
            return;
        }

        int idx = tblStaff.getSelectedRow();
        if (idx >= 0) {
            Employee emp = list.get(idx);
            txtID.setText(emp.getID());
            txtFullName.setText(emp.getName());
            txtAge.setText(String.valueOf(emp.getAge()));
            txtEmail.setText(emp.getEmail());
            txtLuong.setText(String.valueOf(emp.getLuong()));
            validation();
        }
    }

    private void fillTable() {
        model = (DefaultTableModel) tblStaff.getModel();
        model.setRowCount(0);
        list.forEach(emp -> {
            Object[] row = new Object[]{
                emp.getID(),
                emp.getName(),
                emp.getAge(),
                emp.getEmail(),
                emp.getLuong()
            };
            model.addRow(row);
        });
    }

    private void setFirstEmpOnForm() {
        if (list.isEmpty()) {
            return;
        }

        index = 0;
        Employee firstEmp = list.get(index);
        txtID.setText(firstEmp.getID());
        txtFullName.setText(firstEmp.getName());
        txtAge.setText(String.valueOf(firstEmp.getAge()));
        txtEmail.setText(firstEmp.getEmail());
        txtLuong.setText(String.valueOf(firstEmp.getLuong()));
    }

    private void setUpRecord() {
        if (list.isEmpty()) {
            return;
        }

        String indexOfItem = "Record: " + (index + 1) + " of " + list.size();
        record.setText(indexOfItem);
        setHighLight(index);
    }

    private void setHighLight(int row) {
        if (list.isEmpty()) {
            return;
        }

        tblStaff.getSelectionModel().setSelectionInterval(row, row);
    }

    private Employee find(String str) {
        for (Employee emp : list) {
            if (emp.getID().equalsIgnoreCase(str)) {
                return emp;
            }
        }
        return null;
    }

    private void findEmployee() {
        String ID = txtID.getText();

        if (Validator.isRequired(ID)) {
            JOptionPane.showMessageDialog(this, "ID Trống!");
            return;
        }

        Employee emp = find(ID);
        if (emp != null) {
            setHighLight(list.indexOf(emp));
            JOptionPane.showMessageDialog(this, "Đã tìm thấy nhân viên!");
            return;
        }

        JOptionPane.showMessageDialog(this, "Không tìm thấy nhân viên này!");
    }

    public static <T> void remove(List<T> list, Predicate<T> predicate) {
        Collection collection = new ArrayList<>();
        list.stream()
                .filter(predicate::test)
                .forEachOrdered(collection::add);
        list.removeAll(collection);
    }

    private void deleteEmployee() {
        String ID = txtID.getText();
        if (find(ID) == null) {
            findEmployee();
            return;
        }
        
        int[] multiDelete = tblStaff.getSelectedRows();
        
        if (multiDelete.length > 0) {
            for (int i = 0; i < multiDelete.length; i++) {
                list.remove(i);
            }
        }
        
        int result = JOptionPane.showConfirmDialog(this, 
                "Bạn có chắc muốn xóa?");
        if (result == 0) {
            remove(list, Employee.predicateID(ID));
            JOptionPane.showMessageDialog(this, 
                    "Đã xóa nhân viên khỏi danh sách!");
        }
    }

    // Run clock
    @Override
    public void run() {
        Thread t = new Thread(this);
        t.start();
        clock.setText(new SimpleDateFormat("hh:mm:ss")
                .format(Calendar.getInstance().getTime()));
    }

    // validation form
    private void validation() {
        txtIDKeyReleased(new KeyEvent(this, KeyEvent.KEY_RELEASED, 
                System.currentTimeMillis(), 0, KeyEvent.VK_UNDEFINED, (char)402));
        txtFullNameKeyReleased(new KeyEvent(this, KeyEvent.KEY_RELEASED, 
                System.currentTimeMillis(), 0, KeyEvent.VK_UNDEFINED, (char)402));
        txtAgeKeyReleased(new KeyEvent(this, KeyEvent.KEY_RELEASED, 
                System.currentTimeMillis(), 0, KeyEvent.VK_UNDEFINED, (char)402));
        txtEmailKeyReleased(new KeyEvent(this, KeyEvent.KEY_RELEASED, 
                System.currentTimeMillis(), 0, KeyEvent.VK_UNDEFINED, (char)402));
        txtLuongKeyReleased(new KeyEvent(this, KeyEvent.KEY_RELEASED, 
                System.currentTimeMillis(), 0, KeyEvent.VK_UNDEFINED, (char)402));
    }

    // slide show
    private void checkIndex() {
        if (index >= list.size()) {
            index = 0;
            return;
        }
        if (index < 0) {
            index = list.size() - 1;
        }
    }
}
